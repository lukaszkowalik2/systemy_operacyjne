========================================================================
Autor: ŁUKASZ KOWALIK,                                       24.03.2023
========================================================================

* Zawartosc:
============

Katalog programy zawiera pieć programów które były podpuntami ćwiczenia pierwszego:
--------------------------------------------------------------------

1.c - Program ten ma za zadanie wypisać identyfikatory UID, GID, PID, PPID i PGID dla bieżącego procesu.
2.c - Program ten korzyssta z funkcji fork, która jest wywoływana w trzy razy w funkcji for w celu utworzenia procesów potomnych. Następnie dla każdego oraz dla procesu macierzystego wypisuje identyfikatory UID, GID, PID, PPID i PGID. Została użyta funkcja `wait`, która zapewnia,aby proces macierzysty zaczekał na zakończenia procesów potomnych.
3.c - Program ten korzyssta z funkcji fork, która jest wywoływana w trzy razy w funkcji for w celu utworzenia procesów potomnych. Następnie dla każdego oraz dla procesu macierzystego wypisuje identyfikatory UID, GID, PID, PPID i PGID. Została użyta funkcja `sleep`.
4.c - Program ten korzyssta z funkcji fork, która jest wywoływana w trzy razy w funkcji for w celu utworzenia procesów potomnych. Następnie dla każdego oraz dla procesu macierzystego wypisuje identyfikatory UID, GID, PID, PPID i PGID. Została użyta funkcja `sleep`. Funkcja `sleep` jest umieszczona w miejscach, aby pokolenia pojawiały się grupowane pokoleniami na ekranie. Wyniki programu oraz drzewo genealogiczne stworzone z wyników programu zostały zapisane w pliku `process_tree.txt`.
5.c - Program ten korzyssta z funkcji fork, która jest wywoływana w trzy razy w funkcji for w celu utworzenia procesów potomnych. Następnie dla każdego oraz dla procesu macierzystego wypisuje identyfikatory UID, GID, PID, PPID i PGID. Została użyta funkcja `wait`, która zapewnia,aby proces macierzysty zaczekał na zakończenia procesów potomnych. Została użyta także funkcja `setpgid`, aby sprawić by każdy proces potomny stał się liderem swojej własnej grupy procesów.

------------------------------------------------------------------------
* Ile proces´ów powstanie przy n-krotnym wywolaniu funkcji fork i dlaczego?
  - Powstanie 2^n. Ponieważ procer nadrzędny dzieli się na dwa procesy. Jednym z nich jest procer macierzysty a drugim proces potomny. Kolejne wywołanie wytworzy kolejne dwa procesy potomne.

------------------------------------------------------------------------

* Jak uruchomic programy:
=========================

Katalog zawiera program Makefile do kompilacji, linkowania
i uruchamiania powyzszych programow, a takze czyszczenia katalogu 
i jego archiwizacji.

-> Aby uruchomic 1-szy program, nalezy wykonac komende:
       make run_1


-> Aby uruchomic 2-szy program, nalezy wykonac komende:
       make run_2


-> Aby uruchomic 3-szy program, nalezy wykonac komende:
       make run_3


-> Aby uruchomic 4-szy program, nalezy wykonac komende:
       make run_4


-> Aby uruchomic 5-szy program, nalezy wykonac komende:
       make run_5

-> Aby wyczyscic zawartosc katalogu (usunac zbedne pliki), nalezy wykonac:
       make clean

-> W celu archiwizacji oraz kompresji katalogu nalezy wykonac:
       make tar

========================================================================



